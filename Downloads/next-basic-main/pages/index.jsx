import Head from 'next/head';
import styles from '@/styles/Home.module.scss';
import Header from '@/components/Header';
import Image from 'next/image';
import pic from '@/public/img/pic.jpg';
import { useEffect } from 'react';
import { IconContext, FaApple, AiFillAccountBook } from 'react-icons/ai';

//api 라우팅(서버요청 처리를 위해서는 express 라는 프레임웍을 활용)
// next에서는 api 폴더 안쪽에 서버쪽 요청 및 응답에 대한 라우팅 설정 가능
// api 폴더 안쪽의 파일명이 라우터 요청명으로 자동 설정됨. /api/hello

export default function Home() {
	//서버쪽에서 프리렌더된 페이지를 가지고 온 이후에
	//클라이언트쪽에서 다시 서버 쪽 요청 가능
	//next 자체적으로 서버 쪽 요청, 응답 처리.
	// useEffect(() => {
	// 	//api폴더 안쪽의 hello.js에 서버요청처리
	// 	//fetch함수의 두번째 인수로 옵션값을 설정하지 않으면 GET방식으로 전송요청
	// 	//{method:전송방식, body: 전달값(문자값)}
	// 	fetch('/api/hello', {
	// 		method: 'POST',
	// 		body: 'abc',
	// 	})
	// 		.then((res) => res.json())
	// 		.then((json) => console.log(json));

	// 	fetch('/api/hello')
	// 		.then((res) => res.json())
	// 		.then((json) => console.log(json));
	// }, []);
	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={styles.main}>
				<Header />
				<h1>
					Main
					<AiFillAccountBook />
					{/* IconContext.Provider 컴포넌트 임포트 후 웹폰트 아이콘 활용한 부모 요소에 wrapping 해주면 해당 컴포넌트 안쪽에서는 context api를 이용해서 동일한 스타일을 전역으로 활용 가능 */}
					{/* 직접적으로 웹폰트 아이콘에 커스텀 클래스명, 사이즈, 컬러값 지정 가능 */}
				</h1>

				<Image src={pic} alt='pic' />
			</main>
		</>
	);
}
